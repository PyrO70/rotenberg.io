import { join, relative } from "path";
import { promises } from "fs";

import globby from "globby";

const main = async (): Promise<void> => {
  const postsRoot = join(__dirname, `..`, `src`, `posts`);
  const files = await globby(join(postsRoot, `**`, `*.mdx`));
  const loaders: string[] = [];

  for (const file of files) {
    const relativePath = relative(postsRoot, file);
    loaders.push(`{
      key: ${JSON.stringify(relativePath)},
      loadData: (): Promise<unknown> => import("./${relativePath}").then(module => module.data),
      Mdx: dynamic(() => import("./${relativePath}")),
    }`);
  }

  const code = `
    /******
     * This file is generated by scripts/parse-posts
     * DO NOT EDIT MANUALLY !
     *****/
    import dynamic from "next/dynamic";
    
    export const blogPostsLoaders = [${loaders.join(`,\n`)}]
  `;
  await promises.writeFile(join(postsRoot, `index.ts`), code, {
    encoding: `utf8`,
  });
};

if (require.main === module) {
  main().catch((error) => {
    console.error(error);
    process.exit(1);
  });
} else {
  console.error(
    `This module should only be called as main module, not imported.`,
  );
  process.exit(1);
}

export {};
